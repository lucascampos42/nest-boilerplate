generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique @db.VarChar(80)
  username      String    @unique @db.VarChar()
  cpfCnpj       String?   @db.VarChar(14)
  password      String    @db.VarChar(128)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  isDeleted     Boolean   @default(false)
  isActive      Boolean   @default(false)
  activatedAt   DateTime?
  termsIp       String?   @db.VarChar(45)
  termsAccepted Boolean   @default(false)
  personId      Int?      @unique
  tokenVersion  Int       @default(0)

  person Person? @relation(fields: [personId], references: [id])

  permissions Permission[]

  @@map("user")
}

model Permission {
  id        Int      @id @default(autoincrement())
  userId    String // ID do usuário relacionado
  interface String   @db.VarChar(15) // Nome do módulo/interface (ex.: "produtos", "clientes", etc.)
  view      Boolean  @default(false) // Se pode visualizar
  add       Boolean  @default(false) // Se pode adicionar
  edit      Boolean  @default(false) // Se pode editar
  delete    Boolean  @default(false) // Se pode excluir
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, interface]) // Garante que um usuário só tenha uma permissão por interface
  @@map("permission")
}

model Person {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(255)
  fantasyName String?   @db.VarChar(255)
  cpfCnpj     String?   @db.VarChar(11)
  email       String    @unique @db.VarChar(80)
  phone1      String?   @db.VarChar(20)
  phone2      String?   @db.VarChar(20)
  birthDate   DateTime?
  notes       String?
  defaulter   Boolean   @default(false)
  photo       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  isDeleted   Boolean   @default(false)
  user        User?     @relation
  addressId   Int?      @unique
  address     Address?  @relation(fields: [addressId], references: [id])

  @@map("person")
}

enum PersonType {
  INDIVIDUAL
  COMPANY
  RURAL_PRODUCER
}

model Address {
  id           Int       @id @default(autoincrement())
  street       String    @db.VarChar(120) // Rua, avenida, etc.
  complement   String?   @db.VarChar(30) // Complemento (bloco, apto, etc.)
  number       String    @db.VarChar(10) // Número do imóvel
  neighborhood String    @db.VarChar(100) // Bairro
  city         String    @db.VarChar(100) // Cidade
  state        String    @db.VarChar(2) // Estado
  zipCode      String    @db.VarChar(10) // CEP
  createdAt    DateTime  @default(now()) // Data de criação
  updatedAt    DateTime  @updatedAt // Data de atualização
  deletedAt    DateTime? // Data de exclusão
  isDeleted    Boolean   @default(false) // Indica se o registro foi excluído
  person       Person?

  @@map("address")
}

model Config {
  id           Int                 @id @default(autoincrement())
  name         String              @db.VarChar(120)
  email        String              @db.VarChar(60)
  mobile       String              @db.VarChar(20)
  phone1       String?             @db.VarChar(20)
  phone2       String?             @db.VarChar(20)
  place        String              @db.VarChar(150)
  number       String              @db.VarChar(10)
  complement   String?             @db.VarChar(50)
  neighborhood String              @db.VarChar(80)
  city         String              @db.VarChar(60)
  state        String              @db.VarChar(2)
  zipCode      String              @db.VarChar(10)
  workingHours ConfigWorkingHour[]

  @@map("config")
}

model ConfigWorkingHour {
  id         Int       @id @default(autoincrement())
  day        Weekday
  open       DateTime
  close      DateTime
  lunchStart DateTime?
  lunchEnd   DateTime?
  configId   Int
  config     Config    @relation(fields: [configId], references: [id])

  @@map("config_working_hours")
}

enum Weekday {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}
